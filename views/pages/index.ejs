<!DOCTYPE html>
<html lang="en">
    <%- include('../partials/head') %>
<body>
    <% include ../partials/nav %>

   <main>
        <section id="Hardware" class="hardware">
            <ul class="list">
                <li class="list__item">
                    <p class="title">Device Type: <span class="deviceRes" id="dvctype"> </span></p>
                </li>
                <li class="list__item">
                    <p class="title">RAM: <span class="deviceRes" id="ram"> </span></p>
                </li>
                <li class="list__item">
                    <p class="title">SO: <span class="deviceRes" id="SO"> </span></p>
                </li>
                <li class="list__item">
                    <p class="title">Screen Size: <span class="deviceRes" id="screenSize"> </span> </p>
                </li>
                <li class="list__item">
                    <p class="title">CPU:  <i class="arrow arrow--down"></i> </p>
                    <ul class="panel">
                        <li class="list__item">Number of cores: <span class="deviceRes" id="coreNum"> </span></li>
                    </ul>
                </li>
                <li class="list__item">
                    <p class="title">Battery (live): <i class="arrow arrow--up"></i> </p>
                    <ul class="panel" style="display: none;">
                        <li class="list__item">Level: <span class="deviceRes" id="bateryLevel">Detecting... </span></li>
                        <li class="list__item">Charging: <span class="deviceRes" id="bateryStatus">Detecting... </span></li>
                    </ul>
                </li>
                <li class="list__item">
                    <p class="title">Graphic card name:  <i class="arrow arrow--down"></i> </p>
                    <ul class="panel">
                        <li class="list__item">Vendor: <span class="deviceRes" id="vendor"> </span></li>
                        <li class="list__item">Renderer: <span class="deviceRes" id="renderer"> </span></li>
                    </ul>
                </li>
            </ul>
        </section>
   </main>
   <% include ../partials/footer %>
</body>   
    <script>
        document.addEventListener("DOMContentLoaded", () =>{
            Hardware.init()
        });

        let Hardware = {
            init: function() {
                this.ram(),
                this.battery(),
                this.detectDevice(),
                this.osAndBrowser(),
                this.screen(),
                this.getVideoCardInfo(),
                this.cpu()
            },
            ram: ()=>{
                let el = document.getElementById("ram");
                let dvcmen = navigator.deviceMemory;

                el.innerHTML = dvcmen || "Unknown"
                console.log(dvcmen);
            },
            battery: ()=>{
                let bateryLevel  = document.getElementById("bateryLevel");
                let bateryStatus = document.getElementById("bateryStatus");

                try{
                    navigator.getBattery().then((res) => {
                        function chargingchange() {
                            bateryStatus.textContent = t.charging ? "Yes" : "No",
                            console.log("Battery charging? " + (res.charging ? "Yes" : "No"))
                        }

                        function levelchange() {
                            bateryLevel.innerHTML = parseInt(100 * res.level) + "%",
                            console.log("Battery level: " + 100 * res.level + "%")
                        }
                        
                        chargingchange(),
                        levelchange(),
                        
                        res.addEventListener("chargingchange", ()=>{
                            chargingchange()
                        });

                        res.addEventListener("levelchange", ()=>{
                            levelchange()
                        });
                    });
                }catch(e){
                    bateryLevel.innerHTML = "Unknown"; 
                    bateryStatus.innerHTML = "Unknown";
                }
                
            },
            detectDevice: ()=>{
                let el = document.getElementById("dvctype");
                
                if (window.innerWidth > 768) {
                    var devType = "Desktop";
                    el.innerHTML = devType,
                    console.log("=======device======", devType)
                } else{
                    window.innerWidth > 481 && window.innerWidth < 767 ? (devType = "Tablet",
                    el.innerHTML = devType) : window.innerWidth < 480 && (devType = "Mobile",
                    el.innerHTML = devType);
                }
            },
            osAndBrowser: ()=>{
                let e = {
                    options: [],
                    header: [navigator.platform, navigator.userAgent, navigator.appVersion, navigator.vendor, window.opera],
                    dataos: [{
                        name: "Windows Phone",
                        value: "Windows Phone",
                        version: "OS"
                    }, {
                        name: "Windows",
                        value: "Win",
                        version: "NT"
                    }, {
                        name: "iPhone",
                        value: "iPhone",
                        version: "OS"
                    }, {
                        name: "iPad",
                        value: "iPad",
                        version: "OS"
                    }, {
                        name: "Kindle",
                        value: "Silk",
                        version: "Silk"
                    }, {
                        name: "Android",
                        value: "Android",
                        version: "Android"
                    }, {
                        name: "PlayBook",
                        value: "PlayBook",
                        version: "OS"
                    }, {
                        name: "BlackBerry",
                        value: "BlackBerry",
                        version: "/"
                    }, {
                        name: "Macintosh",
                        value: "Mac",
                        version: "OS X"
                    }, {
                        name: "Linux",
                        value: "Linux",
                        version: "rv"
                    }, {
                        name: "Palm",
                        value: "Palm",
                        version: "PalmOS"
                    }],
                    databrowser: [{
                        name: "Chrome",
                        value: "Chrome",
                        version: "Chrome"
                    }, {
                        name: "Firefox",
                        value: "Firefox",
                        version: "Firefox"
                    }, {
                        name: "Safari",
                        value: "Safari",
                        version: "Version"
                    }, {
                        name: "Internet Explorer",
                        value: "MSIE",
                        version: "MSIE"
                    }, {
                        name: "Opera",
                        value: "Opera",
                        version: "Opera"
                    }, {
                        name: "BlackBerry",
                        value: "CLDC",
                        version: "CLDC"
                    }, {
                        name: "Mozilla",
                        value: "Mozilla",
                        version: "Mozilla"
                    }],
                    init: function() {
                        let e = this.header.join(" ");
                        return {
                            os: this.matchItem(e, this.dataos),
                            browser: this.matchItem(e, this.databrowser)
                        }
                    },
                    matchItem: (e,n)=>{
                        let t, o, i, r, a, l = 0, s = 0;
                        for (l = 0; l < n.length; l += 1)
                            if (i = (t = new RegExp(n[l].value,"i")).test(e)) {
                                if (o = new RegExp(n[l].version + "[- /:;]([\\d._]+)","i"),
                                a = "",
                                (r = e.match(o)) && r[1] && (r = r[1]),
                                r)
                                    for (r = r.split(/[._]+/),
                                    s = 0; s < r.length; s += 1)
                                        a += 0 === s ? r[s] + "." : r[s];
                                else
                                    a = "";
                                return {
                                    name: n[l].name,
                                    version: a
                                }
                            }
                        return {
                            name: "unknown",
                            version: 0
                        }
                    }
                }.init();
                document.getElementById("SO").innerHTML = `${e.os.name} ${e.os.version}`,
                console.log(`${e.os.name} ${e.os.version}, ${e.browser.name} ${e.browser.version}`)
            },
            screen: ()=>{
                let e = document.getElementById("screenSize");
                const n = window.screen.height
                , t = window.screen.width;
                e.innerHTML = `${n} x ${t} pixels`
            },
            getVideoCardInfo: ()=>{
                const e = document.createElement("canvas").getContext("webgl")
                , n = document.getElementById("vendor")
                , t = document.getElementById("renderer");
                if (!e)
                    return {
                        error: "no webgl"
                    };
                const o = e.getExtension("WEBGL_debug_renderer_info")
                , i = o ? {
                    vendor: e.getParameter(o.UNMASKED_VENDOR_WEBGL),
                    renderer: e.getParameter(o.UNMASKED_RENDERER_WEBGL)
                } : {
                    error: "no WEBGL_debug_renderer_info"
                };
                n.innerHTML = i.vendor || "unknown",
                t.innerHTML = i.renderer || "unknown"
            },
            cpu: ()=>{
                document.getElementById("coreNum").innerHTML = window.navigator.hardwareConcurrency
            },
        };
    </script>
    <% include ../partials/scripts %> 
</html>